"""
Author: Darrin T. Schultz
Year: 2020
github: @conchoecia
Title: Snakefile to generate phased transcripts, and a reference protein set

This snakefile generates phased transcripts, and is especially useful for highly
heterozygous organisms. The data inputs for this program are:
  - A reference genome
  - A phased VCF file for the genome (preferably whole-chromosome phase blocks)
  - a fastq file (gzipped ok) of FLNC Iso-Seq reads
  - pilon jar
  - Illumina RNA-seq reads (paired)

The data outputs for this program are:
  - transcripts (nucleotide and prot), phased at the transcript level but not
     phased with the genome.
  - a reference protein set (one protein per gene transcript. The protein is
     selected by choosing the longest protein from haplotype 0 or 1.)
  - transcripts and proteins phased with the genome. It is not possible to
     phase every single transcript, so this is a subset of all the transcripts,
     and only contains those that were uniquely assignable to haplotype 0 or 1.
"""
import gzip
import pandas as pd
from Bio import SeqIO

# PUT YOUR FILES HERE
REF      = "raw_files/UCSC_Hcal_v1.fa.gz"

#get the chromosome order in order to fuse the vcf file
chroms = []
with gzip.open(REF, "rt") as f:
    for line in f:
        line = line.strip()
        if line[0] == ">":
            chroms.append(line.split()[0].replace(">", ""))

#!
#!!
#!!!
#!!!!
#!!!!!
#Prefix must not have underscores or periods
PREFIX   = "Hcv1av93" #< DO NOT. PUT an UNDERSCORE or a PERIOD in this PREFIX!
# ^ PREFIX MUST NOT HAVE UNDERSCORES OR PERIODS. ^
#!!!!!
#!!!!
#!!!
#!!
#!
CSV      = "raw_files/Hcal_annotation_v93.csv"
GAN      = "Hcv1"
AV       = "v93" #the assembly version
FLNC     = "raw_files/GLO64_flnc.fastq.gz"
PILONJAR = "raw_files/pilon-1.22.jar"
RNAF     = "/bigdata/raw/rna_reads/Project_STDS_L7_H1546P_Schultz/DS242_S98_L007_R1_001.fastq.gz"
RNAR     = "/bigdata/raw/rna_reads/Project_STDS_L7_H1546P_Schultz/DS242_S98_L007_R2_001.fastq.gz"
# VCF file for the whole genome
gVCFs     = expand("../phasing/final_output/phased_by_chromosome/largest_blocks.hap.phased.{chrs}.vcf.gz", chrs = chroms)

def attach_descriptions_to_pdf(fasta_input,
                               gene_to_description_file,
                               output_file):
    df = pd.read_csv(gene_to_description_file, sep=',',
                     header = None, index_col = 0)
    df.columns = ["description"]
    input_handle  = open(fasta_input, "r")
    output_handle = open(output_file, "w")
    for line in input_handle:
        line = line.strip()
        if line[0] == ">":
            geneid = '.'.join(line[1:].split('.')[:-1])
            if geneid in df.index:
                description = df.at[geneid, "description"]
                print("{} {}".format(line, description), file=output_handle)
            else:
                print(line, file=output_handle)
        else:
            print(line, file=output_handle)
    input_handle.close()
    output_handle.close()

rule all:
    input:
        expand("final_output/{fix}.gff", fix = PREFIX),
        expand("final_output/nucleotide_sequences/unphased/{fix}_transcripts.fasta",fix = PREFIX),
        expand("final_output/vcf_files/{fix}_transcripts.vcf", fix = PREFIX),
        expand("final_output/vcf_files/phased/{fix}_transcripts.phased.vcf", fix = PREFIX),
        # these are phased transcripts, but do not match the phase of the genome
        #expand("tempfiles/nucleotide_sequences/unphased/phase{index}_transcripts_{fix}.fasta",
        #       fix = PREFIX, index = ["1","2"]),
        #expand("tempfiles/fastq/unphased/h{index}.flnc.{fix}.fastq.gz",
        #       fix = PREFIX, index = [1,2]),
        # pilon polish the transcripts
        expand("final_output/nucleotide_sequences/partly_phased/h{index}_pilon_{fix}.fasta",
               fix = PREFIX, index = ["1", "2"]),
        # translate proteins
        expand("final_output/protein_sequences/partly_phased/h{index}_{fix}.pep",
               fix = PREFIX, index = ["1","2"]),
        # make protein models
        expand("final_output/protein_sequences/model/protein_size_table_{fix}.csv",
               fix = PREFIX),
        expand("final_output/protein_sequences/model/{fix}_model_proteins.pep.gz",
               fix = PREFIX),
        # now phase the transcripts with the genome
        expand("final_output/phased/transcripts_shared_by_both_should_be_empty.{fix}.list",
               fix = PREFIX),
        expand("final_output/phased/transcripts_unique_to_h{index}.{fix}.list",
               fix = PREFIX, index = ["1","2"]),
        expand("final_output/phased/second_list_of_transcripts_shared_by_both_should_be_empty.{fix}.list",
               fix = PREFIX),
        # now output the phased peptides and nucleotides
        expand("final_output/protein_sequences/phased/{fix}_h{index}_phased_protein.pep.gz",
               fix = PREFIX, index = ["1","2"]),
        expand("final_output/nucleotide_sequences/phased/{fix}_h{index}_phased_nucl.fasta.gz",
               fix = PREFIX, index = ["1","2"])

rule gen_temporary_ref:
    input:
        ref = REF
    output:
        tempref = "tempfiles/ref.fa"
    shell:
        """
        zcat {input.ref} > {output.tempref}
        """

rule gen_transcripts_from_spreadsheet:
    """
    generates a gff files from all of the sources
    and our manual annotation
    """
    input:
        ref = "tempfiles/ref.fa",
        csv = CSV,
        has = "scripts/horm_annotation_script.py",
        tc  = "scripts/transcript_classes.py",
        mito = "raw_files/Hc1_mito_Mrename.gff3.gz"
    output:
        gff = "final_output/{fix}.gff",
        tsv = "final_output/{fix}.transcript.tsv"
    params:
        genome_assem_number = GAN,
        av = AV
    shell:
        """
        python {input.has} --spreadsheet {input.csv} \
          --genomecode {params.genome_assem_number} \
          --annotationversion {params.av} \
          --gffoutpath {output.gff} \
          --updatedcsvoutpath {output.tsv}
        zcat {input.mito} >> {output.gff}
        """

rule gff_to_gene_description:
    input:
        gff = "final_output/{fix}.gff"
    output:
        gene_to_description = "tempfiles/gene_to_description_{fix}.txt"
    shell:
        """
        cat {input.gff} | grep 'Description' | \
          cut -f9 | tr ';' '\\n' | \
          grep -E 'ID=|Description=' | \
          paste - - | sed 's/ID=//g' | \
          sed 's/Description=//g' | \
          tr '\\t' ',' > {output.gene_to_description}
        """

rule gen_fasta_from_gff:
    input:
        ref = "tempfiles/ref.fa",
        gff = "final_output/{fix}.gff"
    output:
        fas = "final_output/nucleotide_sequences/unphased/{fix}_transcripts.temp.fasta"
    shell:
        """
        awk '{{if ($1 != "M"){{print($0)}} }}' {input.gff} > temp.gff
        gffread -w {output.fas} -g {input.ref} temp.gff
        rm temp.gff
        """

rule attach_descriptions_to_filenames:
    input:
        fas = "final_output/nucleotide_sequences/unphased/{fix}_transcripts.temp.fasta",
        gene_to_description = "tempfiles/gene_to_description_{fix}.txt"
    output:
        fas = "final_output/nucleotide_sequences/unphased/{fix}_transcripts.fasta"
    run:
        attach_descriptions_to_pdf(input.fas,
                                   input.gene_to_description,
                                   output.fas)

rule map_illumina_to_transcripts:
    """
    we will use this alignment to phase the transcripts
    """
    input:
        fas = "final_output/nucleotide_sequences/unphased/{fix}_transcripts.fasta",
        freads = RNAF,
        rreads = RNAR
    output:
        bam = "tempfiles/bamfiles/rna_to_transcripts/ill_to_{fix}_transcripts.sorted.bam"
    threads: workflow.cores
    shell:
        """
        ### first generate a sequence for each isoform
        bwa index {input.fas}
        ## now map illumina to each transcript
        bwa mem -t {threads} {input.fas} {input.freads} {input.rreads} | \
           samtools view -hb -@ {threads} - | \
           samtools sort -@ {threads} > {output.bam}
        samtools index {output.bam}
        """

rule map_flnc_to_transcripts:
    input:
        fas = "final_output/nucleotide_sequences/unphased/{fix}_transcripts.fasta",
        flnc = FLNC
    output:
        bam = "tempfiles/bamfiles/rna_to_transcripts/flnc_to_{fix}_transcripts.sorted.bam"
    threads: workflow.cores
    shell:
        """
        # now map flnc to each transcript
        minimap2 -ax asm20 -t {threads} {input.fas} {input.flnc} | \
           samtools view -hb -@ {threads} - | \
           samtools sort -@ {threads} > {output.bam}
        samtools index {output.bam}
        """

rule merge_bams:
    """
    merge the bam files
    """
    input:
        ill_bam  = "tempfiles/bamfiles/rna_to_transcripts/ill_to_{fix}_transcripts.sorted.bam",
        flnc_bam = "tempfiles/bamfiles/rna_to_transcripts/flnc_to_{fix}_transcripts.sorted.bam"
    output:
        merged   = "tempfiles/bamfiles/merged_to_transcripts/allreads_to_{fix}_transcripts.sorted.bam"
    shell:
        """
        # merge bams
        samtools merge {output.merged} {input.ill_bam} {input.flnc_bam}
        samtools index {output.merged}
        """

rule call_vcf_of_transcripts:
    input:
        fas = "final_output/nucleotide_sequences/unphased/{fix}_transcripts.fasta",
        merged   = "tempfiles/bamfiles/merged_to_transcripts/allreads_to_{fix}_transcripts.sorted.bam"
    output:
        vcf = "final_output/vcf_files/{fix}_transcripts.vcf"
    threads: workflow.cores
    shell:
        """
        # call a vcf
        samtools faidx {input.fas}
        freebayes-parallel <(freebayes_fasta_generate_regions.py {input.fas}.fai 100000) {threads} \
               -f {input.fas} {input.merged} > {output.vcf}
        """
rule phase_transcripts:
    input:
        fas = "final_output/nucleotide_sequences/unphased/{fix}_transcripts.fasta",
        vcf = "final_output/vcf_files/{fix}_transcripts.vcf",
        ill_bam  = "tempfiles/bamfiles/rna_to_transcripts/ill_to_{fix}_transcripts.sorted.bam",
        flnc_bam = "tempfiles/bamfiles/rna_to_transcripts/flnc_to_{fix}_transcripts.sorted.bam"
    output:
        vcf = "final_output/vcf_files/phased/{fix}_transcripts.phased.vcf"
    shell:
        """
        whatshap phase --indels --ignore-read-groups \
           --reference {input.fas} \
           -o {output.vcf} \
           {input.vcf} {input.ill_bam} {input.flnc_bam}
        """

rule haplotag_flnc_bam:
    input:
        vcf = "final_output/vcf_files/phased/{fix}_transcripts.phased.vcf",
        fas = "final_output/nucleotide_sequences/unphased/{fix}_transcripts.fasta",
        flnc_bam = "tempfiles/bamfiles/rna_to_transcripts/flnc_to_{fix}_transcripts.sorted.bam"
    output:
        gzvcf = "final_output/vcf_files/phased/{fix}_transcripts.phased.vcf.gz",
        flnc_bam = "tempfiles/bamfiles/rna_to_transcripts/flnc_haplotagged_to_{fix}_transcripts.sorted.bam"
    shell:
        """
        bgzip -c {input.vcf} > {output.gzvcf}
        tabix -p vcf {output.gzvcf}
        whatshap haplotag --ignore-read-groups -o {output.flnc_bam} \
           --reference {input.fas} {output.gzvcf} {input.flnc_bam}
        """

rule generate_two_references_from_vcf:
    input:
        fas = "final_output/nucleotide_sequences/unphased/{fix}_transcripts.fasta",
        gzvcf = "final_output/vcf_files/phased/{fix}_transcripts.phased.vcf.gz",
    output:
        fas = "tempfiles/nucleotide_sequences/unphased/phase{index}_transcripts_{fix}.fasta"
    params:
        outstem = lambda wildcards: "tempfiles/nucleotide_sequences/unphased",
        prefix = lambda wildcards: wildcards.fix
    shell:
        """
        # generate two references
        for INDEX in 1 2
        do
            bcftools consensus -H ${{INDEX}} \
                -f {input.fas} {input.gzvcf} > {params.outstem}/phase${{INDEX}}_transcripts_{params.prefix}.fasta
        done
        """

rule get_one_fastq_file_per_haplotig:
    """
    split the haplotagged fastq file to correct later.
    """
    input:
        fas = "tempfiles/nucleotide_sequences/unphased/phase{index}_transcripts_{fix}.fasta",
        flnc_bam = "tempfiles/bamfiles/rna_to_transcripts/flnc_haplotagged_to_{fix}_transcripts.sorted.bam",
        reads = FLNC
    output:
        rlist  = "tempfiles/fastq/unphased/h{index}list.{fix}.reads.txt",
        reads = "tempfiles/fastq/unphased/h{index}.flnc.{fix}.fastq.gz",
    params:
        prefix = lambda wildcards: wildcards.fix,
        dex = lambda wildcards: wildcards.index
    shell:
        """
        samtools view -F 4 {input.flnc_bam} | \
            grep "HP:i:{params.dex}" | cut -f1 | sort | \
            uniq > {output.rlist}
        seqtk subseq {input.reads} {output.rlist} | gzip > {output.reads}
        """

rule map_reads_to_transcripts:
    """
    # now map the reads to the haplotypes and correct with pilon
    """
    input:
        fas = "tempfiles/nucleotide_sequences/unphased/phase{index}_transcripts_{fix}.fasta",
        reads = "tempfiles/fastq/unphased/h{index}.flnc.{fix}.fastq.gz",
    output:
        bam = "tempfiles/bamfiles/h{index}flnc_to_h{index}.{fix}.sorted.bam"
    threads: workflow.cores
    shell:
        """
        minimap2 -ax asm20 -t {threads} {input.fas} {input.reads} | \
            samtools view -hb -@ {threads} - | \
            samtools sort -@ {threads} - > {output.bam}
        samtools index {output.bam}
        """

rule pilon_correct_the_references:
    input:
        fas = "tempfiles/nucleotide_sequences/unphased/phase{index}_transcripts_{fix}.fasta",
        reads = "tempfiles/fastq/unphased/h{index}.flnc.{fix}.fastq.gz",
        bam = "tempfiles/bamfiles/h{index}flnc_to_h{index}.{fix}.sorted.bam",
        pilon = PILONJAR
    output:
        seq = "tempfiles/pilon/h{index}_flnc_to_{fix}_h{index}.pilon/h{index}_flnc_to_{fix}_h{index}.pilon.fasta",
    threads: workflow.cores
    params:
        outdir = lambda wildcards: "tempfiles/pilon/h{0}_flnc_to_{1}_h{0}.pilon".format(wildcards.index, wildcards.fix),
        outname = lambda wildcards: "h{0}_flnc_to_{1}_h{0}.pilon".format(wildcards.index, wildcards.fix)
    shell:
        """
        java -Xmx100G -jar {input.pilon} --genome {input.fas} \
            --unpaired {input.bam} \
            --outdir {params.outdir} \
            --output {params.outname} \
            --threads {threads}
        """

rule rename_polished_transcripts:
    input:
        seq = "tempfiles/pilon/h{index}_flnc_to_{fix}_h{index}.pilon/h{index}_flnc_to_{fix}_h{index}.pilon.fasta"
    output:
        seq = "final_output/nucleotide_sequences/partly_phased/h{index}_pilon_{fix}.fasta",
    threads: 1
    params:
        index = lambda wildcards: wildcards.index
    shell:
        """
        sed "s/_pilon/.h{params.index}/g" {input.seq} > {output.seq}
        """
# Didn't implement this in Snakefile. didn't seem necessary
 ## now map the FLNC reads back for QC
 #for INDEX in 1 2
 #do
 #    minimap2 -ax asm20 -t ${THREADS} \
 #        h${INDEX}flnc_to_${PREFIX}h${INDEX}.pilon/h${INDEX}flnc_to_${PREFIX}h${INDEX}.pilon.fasta \
 #   h${INDEX}.flnc.fastq.gz | \
 #   samtools view -hb -@ ${THREADS} - | \
 #   samtools sort -@ ${THREADS} - > h${INDEX}flnc_to_${PREFIX}h${INDEX}.pilon/h${INDEX}flnc_to_h1_pilon.sorted.bam
 #    samtools index h${INDEX}flnc_to_${PREFIX}h${INDEX}.pilon/h${INDEX}flnc_to_h1_pilon.sorted.bam
 #done

rule translate_prots:
    input:
        seq = "final_output/nucleotide_sequences/partly_phased/h{index}_pilon_{fix}.fasta",
        ptp = "scripts/prottrans.py"
    output:
        pep = "final_output/protein_sequences/partly_phased/temp/h{index}_{fix}.pep"
    threads: 1
    shell:
        """
        python2 {input.ptp} -r -a 50 {input.seq} | \
            cut -d'_' -f1 > {output.pep}
        """

rule remove_rRNAs_from_peps:
    """
    gets a list of rRNAs from the annotation and removes those sequences
    from translated peps
    """
    input:
        gff = "final_output/{fix}.gff",
        pep = "final_output/protein_sequences/partly_phased/temp/h{index}_{fix}.pep"
    output:
        pep = "final_output/protein_sequences/partly_phased/h{index}_{fix}.pep"
    run:
        check_for_these = ["rRNA 28S", "rRNA 18S"]
        remove_these = []
        with open(input.gff) as f:
            for line in f:
                line=line.strip()
                if line and line[0] != "#":
                    splitd = line.split('\t')
                    if splitd[2] == "gene":
                        for entry in check_for_these:
                            if entry in splitd[8]:
                                print(splitd[8])
                                remove_these.append([x for x in splitd[8].split(";") if "ID=" in x][0].replace("ID=", ""))
        # now that we have a list of things to get rid of, filter the fasta
        output_handle = open(output.pep, "w")
        keep_these = []
        num_records=0
        for record in SeqIO.parse(input.pep, "fasta"):
            num_records += 1
            keep = True
            for x in remove_these:
                if x in record.id:
                    print("booting", record.id)
                    keep = False
            if keep:
                keep_these.append(record)
        SeqIO.write(keep_these, output_handle, "fasta")
        output_handle.close()

        # now make sure the number of records is correct
        new_num_records = 0
        for record in SeqIO.parse(output.pep, "fasta"):
            new_num_records += 1
        assert new_num_records == len(keep_these)


rule make_gene_comparison_table:
    """
    TODO EDIT THIS - I don't remember what I was supposed to do
    """
    input:
        fasta = "final_output/nucleotide_sequences/unphased/{fix}_transcripts.fasta",
        peps = expand("final_output/protein_sequences/partly_phased/h{index}_{fix}.pep",
                      fix = PREFIX, index = ["1", "2"]),
        make_table_of_genes = "scripts/make_table_of_genes.py",
    output:
        diff_length_csvs = "final_output/protein_sequences/model/protein_size_table_{fix}.csv",
        protein_model    = "final_output/protein_sequences/model/{fix}_model_proteins.temp.pep"
    shell:
        """
        python {input.make_table_of_genes} {input.fasta} {input.peps} {output.diff_length_csvs} {output.protein_model}
        """

rule attach_descriptions_to_protein_models:
    input:
        pep = "final_output/protein_sequences/model/{fix}_model_proteins.temp.pep",
        gene_to_description = "tempfiles/gene_to_description_{fix}.txt"
    output:
        pep = "final_output/protein_sequences/model/{fix}_model_proteins.temp2.pep"
    run:
        attach_descriptions_to_pdf(input.pep,
                                   input.gene_to_description,
                                   output.pep)

rule gzip_protein_models:
    input:
        fas = "final_output/protein_sequences/model/{fix}_model_proteins.temp2.pep"
    output:
        fas = "final_output/protein_sequences/model/{fix}_model_proteins.pep.gz"
    shell:
        """
        cat {input.fas} | gzip > {output.fas}
        """

rule map_phased_transcripts_to_genome:
    """
    Next we need to figure out the phasing of the transcripts
     to match them with the whole-genome phasing.
    """
    input:
        transcripts = "final_output/nucleotide_sequences/partly_phased/h{index}_pilon_{fix}.fasta",
        genome = "tempfiles/ref.fa"
    output:
        bam = "tempfiles/bamfiles/transcripts_to_genome/pilon_h{index}_to_ref.{fix}.sorted.bam"
    threads: workflow.cores
    shell:
        """
        minimap2 -ax asm20 -t {threads} {input.genome} {input.transcripts} | \
            samtools view -hb -@ {threads} - | \
            samtools sort -@ {threads} - > {output.bam}
        samtools index {output.bam}
        """

rule merge_bams_from_transcripts:
    """
    just merge the bams from the transcripts to phase them
    """
    input:
        bams = expand("tempfiles/bamfiles/transcripts_to_genome/pilon_h{index}_to_ref.{fix}.sorted.bam", fix = PREFIX, index = ["1", "2"]),
    output:
        merged = "tempfiles/bamfiles/transcripts_to_genome/pilon_merged_to_ref.{fix}.sorted.bam",
        index  = "tempfiles/bamfiles/transcripts_to_genome/pilon_merged_to_ref.{fix}.sorted.bam.bai"

    threads: 1
    shell:
        """
        samtools merge -f {output.merged} {input.bams}
        samtools index {output.merged}
        """

rule gen_temporary_whole_genome_vcf:
    """
    This generates a vcf file for the whole genome.
     These are from phase blocks as large as the chromosome sizes.
    """
    input:
        vcfs = gVCFs
    output:
        gz  = "tempfiles/whole_genome_phased.vcf.gz",
        tbi = "tempfiles/whole_genome_phased.vcf.gz.tbi"
    params:
        vcf = "tempfiles/whole_genome_phased.vcf"
    shell:
        """
        set +e
        COUNTER=0
        for file in {input.vcfs}
        do
            if [ $COUNTER -eq 0 ]
            then
                COUNTER=1
                zcat ${{file}} > {params.vcf}
            else
                zcat ${{file}} | grep -v '#' >> {params.vcf}
            fi
        done

        bgzip -c {params.vcf} > {output.gz}
        tabix -p vcf {output.gz}
        set -e
        """

rule haplotag_transcripts:
    input:
        gz = "tempfiles/whole_genome_phased.vcf.gz",
        tbi = "tempfiles/whole_genome_phased.vcf.gz.tbi",
        merged = "tempfiles/bamfiles/transcripts_to_genome/pilon_merged_to_ref.{fix}.sorted.bam",
        index = "tempfiles/bamfiles/transcripts_to_genome/pilon_merged_to_ref.{fix}.sorted.bam.bai",
        ref = "tempfiles/ref.fa"
    output:
        bam = "tempfiles/bamfiles/transcripts_to_genome/haplotaged_pilon_to_ref.{fix}.sorted.bam"
    shell:
        """
        whatshap haplotag --ignore-read-groups -o {output.bam} \
            --reference {input.ref} {input.gz} {input.merged}
        """

rule make_phased_list:
    input:
        bam = "tempfiles/bamfiles/transcripts_to_genome/haplotaged_pilon_to_ref.{fix}.sorted.bam"
    output:
        txt = "tempfiles/txt/h{index}_transcript_to_genome.{fix}.list"
    threads: 1
    params:
        index = lambda wildcards: wildcards.index
    shell:
        """
        samtools view {input.bam} | grep 'HP:i:{params.index}' | \
            cut -f1 | sort | uniq | sort > {output.txt}
        """

rule list_of_transcripts_shared_by_both_haplotypes:
    input:
        txt = expand("tempfiles/txt/h{index}_transcript_to_genome.{fix}.list",
                     fix = PREFIX, index = ["1","2"]),
    output:
        txt = "final_output/phased/transcripts_shared_by_both_should_be_empty.{fix}.list"
    shell:
        """
        # a list of transcripts that are shared by both haplotypes. Should be nothing
        comm -12 {input.txt} > {output.txt}
        """

rule get_uniquely_assigned_transcripts:
    input:
        txt = "tempfiles/txt/h{index}_transcript_to_genome.{fix}.list",
        transcript_list_unique = "scripts/transcript_list_unique.py"
    output:
        txt = "final_output/phased/transcripts_unique_to_h{index}.{fix}.list"
    shell:
        """
        cat {input.txt} | \
            python {input.transcript_list_unique} > {output.txt}
        """

rule second_list_of_phased_transcripts_shared_by_both_haplotypes:
    input:
        txt = expand("final_output/phased/transcripts_unique_to_h{index}.{fix}.list",
                     fix = PREFIX, index = ["1","2"]),
    output:
        txt = "final_output/phased/second_list_of_transcripts_shared_by_both_should_be_empty.{fix}.list"
    shell:
        """
        # a list of transcripts that are shared by both haplotypes. Should be nothing
        comm -12 {input.txt} > {output.txt}
        """

rule temp_catd_phased_peps:
    """
    just makes a temporary file that contains both peptide files
    """
    input:
        peps = expand("final_output/protein_sequences/partly_phased/h{index}_{fix}.pep",
                     fix = PREFIX, index = ["1","2"]),
    output:
        temppeps = "tempfiles/temp_fused_phased.pep"
    shell:
        """
        cat {input.peps} > {output.temppeps}
        """

rule make_final_phased_peps:
    input:
        temppeps = "tempfiles/temp_fused_phased.pep",
        peplist = "final_output/phased/transcripts_unique_to_h{index}.{fix}.list"
    output:
        final_peptides = "final_output/protein_sequences/phased/{fix}_h{index}_phased_protein.pep.gz"
    threads: 1
    params:
        index = lambda wildcards: wildcards.index
    shell:
        """
        seqtk subseq {input.temppeps} {input.peplist} | \
            cut -d'.' -f1,2,3,4,5 | \
            bioawk -v var={params.index} -cfastx '{{printf(">%s.h%s\\n%s\\n", $name, var, $seq)}}' | \
            gzip > {output.final_peptides}
        """

rule temp_catd_phased_nucls:
    """
    just makes a temporary file that contains both nucleotide files
    """
    input:
        nucls = expand("final_output/nucleotide_sequences/partly_phased/h{index}_pilon_{fix}.fasta",
                     fix = PREFIX, index = ["1","2"]),
    output:
        tempnucls = "tempfiles/temp_nucl_fused_phased.fasta"
    shell:
        """
        cat {input.nucls} > {output.tempnucls}
        """

rule make_final_phased_nucls:
    input:
        tempnucl = "tempfiles/temp_nucl_fused_phased.fasta",
        nucllist = "final_output/phased/transcripts_unique_to_h{index}.{fix}.list"
    output:
        final_nucs = "final_output/nucleotide_sequences/phased/{fix}_h{index}_phased_nucl.fasta.gz"
    threads: 1
    params:
        index = lambda wildcards: wildcards.index
    shell:
        """
        seqtk subseq {input.tempnucl} {input.nucllist} | \
            cut -d'.' -f1,2,3,4,5 | \
            bioawk -v var={params.index} -cfastx '{{printf(">%s.h%s\\n%s\\n", $name, var, $seq)}}' | \
            gzip > {output.final_nucs}

        """
